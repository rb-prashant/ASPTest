//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace BinaryToISB_v2.WSTest {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    // CODEGEN: The optional WSDL extension element 'PolicyReference' from namespace 'http://schemas.xmlsoap.org/ws/2004/09/policy' was not handled.
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="BasicHttpBinding_IRequest", Namespace="http://tempuri.org/")]
    public partial class Request : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback StartOrderOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProductDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProductDetails_MIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadBinaryFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckOrderOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckOrder_XMLOperationCompleted;
        
        private System.Threading.SendOrPostCallback ValidateGUIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback TokenAuthenticationOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Request() {
            this.Url = global::BinaryToISB_v2.Properties.Settings.Default.BinaryToISB_v2_com_infosearchsite_isbcweb_Request;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event StartOrderCompletedEventHandler StartOrderCompleted;
        
        /// <remarks/>
        public event ProductDetailsCompletedEventHandler ProductDetailsCompleted;
        
        /// <remarks/>
        public event ProductDetails_MIDCompletedEventHandler ProductDetails_MIDCompleted;
        
        /// <remarks/>
        public event UploadBinaryFileCompletedEventHandler UploadBinaryFileCompleted;
        
        /// <remarks/>
        public event CheckOrderCompletedEventHandler CheckOrderCompleted;
        
        /// <remarks/>
        public event CheckOrder_XMLCompletedEventHandler CheckOrder_XMLCompleted;
        
        /// <remarks/>
        public event ValidateGUIDCompletedEventHandler ValidateGUIDCompleted;
        
        /// <remarks/>
        public event TokenAuthenticationCompletedEventHandler TokenAuthenticationCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IRequest/StartOrder", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string StartOrder([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string IntPackage, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string tp, bool prod, [System.Xml.Serialization.XmlIgnoreAttribute()] bool prodSpecified) {
            object[] results = this.Invoke("StartOrder", new object[] {
                        IntPackage,
                        tp,
                        prod,
                        prodSpecified});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void StartOrderAsync(string IntPackage, string tp, bool prod, bool prodSpecified) {
            this.StartOrderAsync(IntPackage, tp, prod, prodSpecified, null);
        }
        
        /// <remarks/>
        public void StartOrderAsync(string IntPackage, string tp, bool prod, bool prodSpecified, object userState) {
            if ((this.StartOrderOperationCompleted == null)) {
                this.StartOrderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStartOrderOperationCompleted);
            }
            this.InvokeAsync("StartOrder", new object[] {
                        IntPackage,
                        tp,
                        prod,
                        prodSpecified}, this.StartOrderOperationCompleted, userState);
        }
        
        private void OnStartOrderOperationCompleted(object arg) {
            if ((this.StartOrderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StartOrderCompleted(this, new StartOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IRequest/ProductDetails", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ProductDetails([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string UID, [System.Xml.Serialization.XmlElementAttribute("productdetails", IsNullable=true)] string productdetails1, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string productID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string tp, bool prod, [System.Xml.Serialization.XmlIgnoreAttribute()] bool prodSpecified) {
            object[] results = this.Invoke("ProductDetails", new object[] {
                        UID,
                        productdetails1,
                        productID,
                        tp,
                        prod,
                        prodSpecified});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ProductDetailsAsync(string UID, string productdetails1, string productID, string tp, bool prod, bool prodSpecified) {
            this.ProductDetailsAsync(UID, productdetails1, productID, tp, prod, prodSpecified, null);
        }
        
        /// <remarks/>
        public void ProductDetailsAsync(string UID, string productdetails1, string productID, string tp, bool prod, bool prodSpecified, object userState) {
            if ((this.ProductDetailsOperationCompleted == null)) {
                this.ProductDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProductDetailsOperationCompleted);
            }
            this.InvokeAsync("ProductDetails", new object[] {
                        UID,
                        productdetails1,
                        productID,
                        tp,
                        prod,
                        prodSpecified}, this.ProductDetailsOperationCompleted, userState);
        }
        
        private void OnProductDetailsOperationCompleted(object arg) {
            if ((this.ProductDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProductDetailsCompleted(this, new ProductDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IRequest/ProductDetails_MID", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ProductDetails_MID([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string UID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string productdetails, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string tp, bool prod, [System.Xml.Serialization.XmlIgnoreAttribute()] bool prodSpecified) {
            object[] results = this.Invoke("ProductDetails_MID", new object[] {
                        UID,
                        productdetails,
                        tp,
                        prod,
                        prodSpecified});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ProductDetails_MIDAsync(string UID, string productdetails, string tp, bool prod, bool prodSpecified) {
            this.ProductDetails_MIDAsync(UID, productdetails, tp, prod, prodSpecified, null);
        }
        
        /// <remarks/>
        public void ProductDetails_MIDAsync(string UID, string productdetails, string tp, bool prod, bool prodSpecified, object userState) {
            if ((this.ProductDetails_MIDOperationCompleted == null)) {
                this.ProductDetails_MIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProductDetails_MIDOperationCompleted);
            }
            this.InvokeAsync("ProductDetails_MID", new object[] {
                        UID,
                        productdetails,
                        tp,
                        prod,
                        prodSpecified}, this.ProductDetails_MIDOperationCompleted, userState);
        }
        
        private void OnProductDetails_MIDOperationCompleted(object arg) {
            if ((this.ProductDetails_MIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProductDetails_MIDCompleted(this, new ProductDetails_MIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IRequest/UploadBinaryFile", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string UploadBinaryFile([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string UID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string PDI, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string FileData, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string productID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string Filename, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string FileType, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string tp, bool prod, [System.Xml.Serialization.XmlIgnoreAttribute()] bool prodSpecified) {
            object[] results = this.Invoke("UploadBinaryFile", new object[] {
                        UID,
                        PDI,
                        FileData,
                        productID,
                        Filename,
                        FileType,
                        tp,
                        prod,
                        prodSpecified});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadBinaryFileAsync(string UID, string PDI, string FileData, string productID, string Filename, string FileType, string tp, bool prod, bool prodSpecified) {
            this.UploadBinaryFileAsync(UID, PDI, FileData, productID, Filename, FileType, tp, prod, prodSpecified, null);
        }
        
        /// <remarks/>
        public void UploadBinaryFileAsync(string UID, string PDI, string FileData, string productID, string Filename, string FileType, string tp, bool prod, bool prodSpecified, object userState) {
            if ((this.UploadBinaryFileOperationCompleted == null)) {
                this.UploadBinaryFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadBinaryFileOperationCompleted);
            }
            this.InvokeAsync("UploadBinaryFile", new object[] {
                        UID,
                        PDI,
                        FileData,
                        productID,
                        Filename,
                        FileType,
                        tp,
                        prod,
                        prodSpecified}, this.UploadBinaryFileOperationCompleted, userState);
        }
        
        private void OnUploadBinaryFileOperationCompleted(object arg) {
            if ((this.UploadBinaryFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadBinaryFileCompleted(this, new UploadBinaryFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IRequest/CheckOrder", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string CheckOrder([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string UID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string PDI, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string tp, bool prod, [System.Xml.Serialization.XmlIgnoreAttribute()] bool prodSpecified) {
            object[] results = this.Invoke("CheckOrder", new object[] {
                        UID,
                        PDI,
                        tp,
                        prod,
                        prodSpecified});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckOrderAsync(string UID, string PDI, string tp, bool prod, bool prodSpecified) {
            this.CheckOrderAsync(UID, PDI, tp, prod, prodSpecified, null);
        }
        
        /// <remarks/>
        public void CheckOrderAsync(string UID, string PDI, string tp, bool prod, bool prodSpecified, object userState) {
            if ((this.CheckOrderOperationCompleted == null)) {
                this.CheckOrderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckOrderOperationCompleted);
            }
            this.InvokeAsync("CheckOrder", new object[] {
                        UID,
                        PDI,
                        tp,
                        prod,
                        prodSpecified}, this.CheckOrderOperationCompleted, userState);
        }
        
        private void OnCheckOrderOperationCompleted(object arg) {
            if ((this.CheckOrderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckOrderCompleted(this, new CheckOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IRequest/CheckOrder_XML", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string CheckOrder_XML([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string UID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string PDI, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string tp, bool prod, [System.Xml.Serialization.XmlIgnoreAttribute()] bool prodSpecified) {
            object[] results = this.Invoke("CheckOrder_XML", new object[] {
                        UID,
                        PDI,
                        tp,
                        prod,
                        prodSpecified});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckOrder_XMLAsync(string UID, string PDI, string tp, bool prod, bool prodSpecified) {
            this.CheckOrder_XMLAsync(UID, PDI, tp, prod, prodSpecified, null);
        }
        
        /// <remarks/>
        public void CheckOrder_XMLAsync(string UID, string PDI, string tp, bool prod, bool prodSpecified, object userState) {
            if ((this.CheckOrder_XMLOperationCompleted == null)) {
                this.CheckOrder_XMLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckOrder_XMLOperationCompleted);
            }
            this.InvokeAsync("CheckOrder_XML", new object[] {
                        UID,
                        PDI,
                        tp,
                        prod,
                        prodSpecified}, this.CheckOrder_XMLOperationCompleted, userState);
        }
        
        private void OnCheckOrder_XMLOperationCompleted(object arg) {
            if ((this.CheckOrder_XMLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckOrder_XMLCompleted(this, new CheckOrder_XMLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IRequest/ValidateGUID", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ValidateGUID([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string UID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string tp, bool prod, [System.Xml.Serialization.XmlIgnoreAttribute()] bool prodSpecified) {
            object[] results = this.Invoke("ValidateGUID", new object[] {
                        UID,
                        tp,
                        prod,
                        prodSpecified});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ValidateGUIDAsync(string UID, string tp, bool prod, bool prodSpecified) {
            this.ValidateGUIDAsync(UID, tp, prod, prodSpecified, null);
        }
        
        /// <remarks/>
        public void ValidateGUIDAsync(string UID, string tp, bool prod, bool prodSpecified, object userState) {
            if ((this.ValidateGUIDOperationCompleted == null)) {
                this.ValidateGUIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidateGUIDOperationCompleted);
            }
            this.InvokeAsync("ValidateGUID", new object[] {
                        UID,
                        tp,
                        prod,
                        prodSpecified}, this.ValidateGUIDOperationCompleted, userState);
        }
        
        private void OnValidateGUIDOperationCompleted(object arg) {
            if ((this.ValidateGUIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidateGUIDCompleted(this, new ValidateGUIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IRequest/TokenAuthentication", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string TokenAuthentication([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string Token, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string tp) {
            object[] results = this.Invoke("TokenAuthentication", new object[] {
                        Token,
                        tp});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void TokenAuthenticationAsync(string Token, string tp) {
            this.TokenAuthenticationAsync(Token, tp, null);
        }
        
        /// <remarks/>
        public void TokenAuthenticationAsync(string Token, string tp, object userState) {
            if ((this.TokenAuthenticationOperationCompleted == null)) {
                this.TokenAuthenticationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTokenAuthenticationOperationCompleted);
            }
            this.InvokeAsync("TokenAuthentication", new object[] {
                        Token,
                        tp}, this.TokenAuthenticationOperationCompleted, userState);
        }
        
        private void OnTokenAuthenticationOperationCompleted(object arg) {
            if ((this.TokenAuthenticationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TokenAuthenticationCompleted(this, new TokenAuthenticationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void StartOrderCompletedEventHandler(object sender, StartOrderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StartOrderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal StartOrderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ProductDetailsCompletedEventHandler(object sender, ProductDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProductDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProductDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ProductDetails_MIDCompletedEventHandler(object sender, ProductDetails_MIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProductDetails_MIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProductDetails_MIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void UploadBinaryFileCompletedEventHandler(object sender, UploadBinaryFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadBinaryFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadBinaryFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CheckOrderCompletedEventHandler(object sender, CheckOrderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckOrderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckOrderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CheckOrder_XMLCompletedEventHandler(object sender, CheckOrder_XMLCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckOrder_XMLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckOrder_XMLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ValidateGUIDCompletedEventHandler(object sender, ValidateGUIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ValidateGUIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ValidateGUIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void TokenAuthenticationCompletedEventHandler(object sender, TokenAuthenticationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TokenAuthenticationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TokenAuthenticationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591